#include <string.h>
#include <stdio.h>

extern "C"
{
#include "jpeglib.h"
#include "cdjpeg.h"
}
#include "jerror.h"
#include "setjmp.h"


struct my_error_mgr {
  struct jpeg_error_mgr pub;
  jmp_buf setjmp_buffer;
};


typedef struct my_error_mgr * my_error_ptr;


METHODDEF(void)
my_error_exit (j_common_ptr cinfo)
{
  my_error_ptr myerr = (my_error_ptr) cinfo->err;
  (*cinfo->err->output_message) (cinfo);
  longjmp(myerr->setjmp_buffer, 1);
}


int main (int argc, char** argv)
{


    struct jpeg_decompress_struct cinfo;
    struct my_error_mgr jerr;
    char filename[20];
    FILE* infile;		
    JDIMENSION row,col;
    JSAMPARRAY buffer;
    char *image_buffer,*imageR,*imageG,*imageB;
    int row_stride;
    int i,j;

   
    strcpy(filename,argv[1]);
    if ((infile = fopen(filename, "rb")) == NULL) {
	fprintf(stderr, "can't open %s\n", filename);
	return 0;
    }


    cinfo.err = jpeg_std_error(&jerr.pub);
    jerr.pub.error_exit = my_error_exit;
    if (setjmp(jerr.setjmp_buffer)) {
        jpeg_destroy_decompress(&cinfo);
	fclose(infile);
	return 0;
    }

    jpeg_create_decompress(&cinfo);
    jpeg_stdio_src(&cinfo, infile);
    (void) jpeg_read_header(&cinfo, TRUE);
    
   
    
    (void) jpeg_start_decompress(&cinfo);
   
    row = cinfo.output_width;col=cinfo.output_height;
    // printf("%d %d \n", row,col);

 
    row_stride = cinfo.output_width * cinfo.output_components;
    
    buffer = (*cinfo.mem->alloc_sarray)
		((j_common_ptr) &cinfo, JPOOL_IMAGE, row_stride, 1);


    image_buffer=new char[row*3*col];
    imageR=new char[row*col];
    imageG=new char[row*col];
    imageB=new char[row*col];

    i=0;
    while (cinfo.output_scanline < cinfo.output_height) {
	jpeg_read_scanlines(&cinfo, buffer, 1);
	for (j=0;j<3*cinfo.output_width;j++) {
		image_buffer[i++]=buffer[0][j];
	    }
	       
    }

    i=0;j=0;
    while(j<row*3*col){
	imageR[i]=image_buffer[j++]; 
	imageG[i]=image_buffer[j++];
	imageB[i]=image_buffer[j++];
    }


    delete [] image_buffer,imageR,imageG,imageB;
    
    (void) jpeg_finish_decompress(&cinfo);
    
    jpeg_destroy_decompress(&cinfo);
    fclose(infile);
    return 1;

}


